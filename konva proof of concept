<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Konva Curve + Zoom + Middle Mouse Pan</title>
<style>
  body { margin:0; background:#2b2b2b; overflow:hidden; }
  #canvas { width:100vw; height:100vh; background:#303030; }
</style>
</head>
<body>
<div id="canvas"></div>
<script src="https://unpkg.com/konva/konva.min.js"></script>
<script>
const stage = new Konva.Stage({
  container: 'canvas',
  width: window.innerWidth,
  height: window.innerHeight,
  draggable: false // we'll enable only during middle button drag
});
const layer = new Konva.Layer();
stage.add(layer);

// two ports
const source = new Konva.Circle({ x:100, y:200, radius:8, fill:'orange', name:'port-src' });
const dest   = new Konva.Circle({ x:300, y:200, radius:8, fill:'white',  name:'port-dest' });
layer.add(source, dest);

let activeLine = null;
let startPort = null;

// curve creation
source.on('mousedown', (e) => {
  if (e.evt.button !== 0) return; // only left click
  startPort = source;
  const p = startPort.getAbsolutePosition();

  activeLine = new Konva.Line({
    points: [p.x,p.y,p.x,p.y],
    stroke: 'orange',
    strokeWidth: 2,
    bezier: true
  });
  layer.add(activeLine);
  layer.draw();

  stage.on('mousemove.curve', () => {
    if (!activeLine) return;
    const p1 = startPort.getAbsolutePosition();
    const p2 = stage.getPointerPosition();
    updateCurve(p1,p2);
    layer.batchDraw();
  });

  stage.on('mouseup.curve', () => {
    stage.off('mousemove.curve');
    stage.off('mouseup.curve');
    if (!activeLine) return;
    const dp = dest.getAbsolutePosition();
    const mp = stage.getPointerPosition();
    if (Math.hypot(dp.x-mp.x, dp.y-mp.y) < 20) {
      updateCurve(startPort.getAbsolutePosition(), dp);
    } else {
      activeLine.destroy();
    }
    activeLine = null;
    layer.draw();
  });
});

function updateCurve(p1,p2){
  const cp1x=p1.x, cp1y=(p1.y+p2.y)/2;
  const cp2x=p2.x, cp2y=(p1.y+p2.y)/2;
  activeLine.points([p1.x,p1.y,cp1x,cp1y,cp2x,cp2y,p2.x,p2.y]);
}

// zoom with wheel
stage.on('wheel',(e)=>{
  e.evt.preventDefault();
  const scaleBy=1.05;
  const oldScale=stage.scaleX();
  const pointer=stage.getPointerPosition();
  const mousePointTo={
    x:(pointer.x-stage.x())/oldScale,
    y:(pointer.y-stage.y())/oldScale
  };
  const dir=e.evt.deltaY>0?-1:1;
  const newScale=dir>0?oldScale*scaleBy:oldScale/scaleBy;
  stage.scale({x:newScale,y:newScale});
  stage.position({
    x:pointer.x-mousePointTo.x*newScale,
    y:pointer.y-mousePointTo.y*newScale
  });
  stage.batchDraw();
});

// pan with middle mouse drag
let isPanning=false;
let lastPos=null;

stage.on('mousedown',(e)=>{
  if(e.evt.button===1){ // middle mouse
    isPanning=true;
    stage.draggable(true);
    lastPos=stage.getPointerPosition();
  }
});
stage.on('mouseup',(e)=>{
  if(e.evt.button===1){
    isPanning=false;
    stage.draggable(false);
  }
});
stage.getContainer().addEventListener('contextmenu',(e)=>e.preventDefault());
</script>
</body>
</html>
